# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Asset types

class AssetOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Asset create method"""
    id: _int
    sector: Optional[_str]
    transactions: 'TransactionCreateManyNestedWithoutRelationsInput'
    historicalData: 'HistoricalDataCreateManyNestedWithoutRelationsInput'


class AssetCreateInput(AssetOptionalCreateInput):
    """Required arguments to the Asset create method"""
    symbol: _str
    name: _str
    assetType: _str
    quantity: _float
    price: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AssetOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Asset create method, without relations"""
    id: _int
    sector: Optional[_str]


class AssetCreateWithoutRelationsInput(AssetOptionalCreateWithoutRelationsInput):
    """Required arguments to the Asset create method, without relations"""
    symbol: _str
    name: _str
    assetType: _str
    quantity: _float
    price: _float

class AssetConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AssetCreateWithoutRelationsInput'
    where: 'AssetWhereUniqueInput'

class AssetCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AssetCreateWithoutRelationsInput'
    connect: 'AssetWhereUniqueInput'
    connect_or_create: 'AssetConnectOrCreateWithoutRelationsInput'


class AssetCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AssetCreateWithoutRelationsInput', List['AssetCreateWithoutRelationsInput']]
    connect: Union['AssetWhereUniqueInput', List['AssetWhereUniqueInput']]
    connect_or_create: Union['AssetConnectOrCreateWithoutRelationsInput', List['AssetConnectOrCreateWithoutRelationsInput']]

_AssetWhereUnique_id_Input = TypedDict(
    '_AssetWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_AssetWhereUnique_symbol_Input = TypedDict(
    '_AssetWhereUnique_symbol_Input',
    {
        'symbol': '_str',
    },
    total=True
)

AssetWhereUniqueInput = Union[
    '_AssetWhereUnique_id_Input',
    '_AssetWhereUnique_symbol_Input',
]


class AssetUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    symbol: _str
    name: _str
    assetType: _str
    sector: Optional[_str]
    quantity: Union[AtomicFloatInput, _float]
    price: Union[AtomicFloatInput, _float]
    transactions: 'TransactionUpdateManyWithoutRelationsInput'
    historicalData: 'HistoricalDataUpdateManyWithoutRelationsInput'


class AssetUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    symbol: _str
    name: _str
    assetType: _str
    sector: Optional[_str]
    quantity: Union[AtomicFloatInput, _float]
    price: Union[AtomicFloatInput, _float]


class AssetUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AssetCreateWithoutRelationsInput']
    connect: List['AssetWhereUniqueInput']
    connect_or_create: List['AssetConnectOrCreateWithoutRelationsInput']
    set: List['AssetWhereUniqueInput']
    disconnect: List['AssetWhereUniqueInput']
    delete: List['AssetWhereUniqueInput']

    # TODO
    # update: List['AssetUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AssetUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AssetScalarWhereInput']
    # upsert: List['AssetUpserteWithWhereUniqueWithoutRelationsInput']


class AssetUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AssetCreateWithoutRelationsInput'
    connect: 'AssetWhereUniqueInput'
    connect_or_create: 'AssetConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AssetUpdateInput'
    # upsert: 'AssetUpsertWithoutRelationsInput'


class AssetUpsertInput(TypedDict):
    create: 'AssetCreateInput'
    update: 'AssetUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Asset_id_OrderByInput = TypedDict(
    '_Asset_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Asset_symbol_OrderByInput = TypedDict(
    '_Asset_symbol_OrderByInput',
    {
        'symbol': 'SortOrder',
    },
    total=True
)

_Asset_name_OrderByInput = TypedDict(
    '_Asset_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Asset_assetType_OrderByInput = TypedDict(
    '_Asset_assetType_OrderByInput',
    {
        'assetType': 'SortOrder',
    },
    total=True
)

_Asset_sector_OrderByInput = TypedDict(
    '_Asset_sector_OrderByInput',
    {
        'sector': 'SortOrder',
    },
    total=True
)

_Asset_quantity_OrderByInput = TypedDict(
    '_Asset_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_Asset_price_OrderByInput = TypedDict(
    '_Asset_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Asset_RelevanceInner = TypedDict(
    '_Asset_RelevanceInner',
    {
        'fields': 'List[AssetScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Asset_RelevanceOrderByInput = TypedDict(
    '_Asset_RelevanceOrderByInput',
    {
        '_relevance': '_Asset_RelevanceInner',
    },
    total=True
)

AssetOrderByInput = Union[
    '_Asset_id_OrderByInput',
    '_Asset_symbol_OrderByInput',
    '_Asset_name_OrderByInput',
    '_Asset_assetType_OrderByInput',
    '_Asset_sector_OrderByInput',
    '_Asset_quantity_OrderByInput',
    '_Asset_price_OrderByInput',
    '_Asset_RelevanceOrderByInput',
]



# recursive Asset types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AssetRelationFilter = TypedDict(
    'AssetRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AssetListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AssetInclude(TypedDict, total=False):
    """Asset relational arguments"""
    transactions: Union[bool, 'FindManyTransactionArgsFromAsset']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromAsset']


    

class AssetIncludeFromAsset(TypedDict, total=False):
    """Relational arguments for Asset"""
    transactions: Union[bool, 'FindManyTransactionArgsFromAssetRecursive1']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromAssetRecursive1']


class AssetIncludeFromAssetRecursive1(TypedDict, total=False):
    """Relational arguments for Asset"""
    transactions: Union[bool, 'FindManyTransactionArgsFromAssetRecursive2']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromAssetRecursive2']


class AssetIncludeFromAssetRecursive2(TypedDict, total=False):
    """Relational arguments for Asset"""
    transactions: Union[bool, 'FindManyTransactionArgsFromAssetRecursive3']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromAssetRecursive3']


class AssetIncludeFromAssetRecursive3(TypedDict, total=False):
    """Relational arguments for Asset"""
    transactions: Union[bool, 'FindManyTransactionArgsFromAssetRecursive4']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromAssetRecursive4']


class AssetIncludeFromAssetRecursive4(TypedDict, total=False):
    """Relational arguments for Asset"""

    

class AssetArgsFromAsset(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'AssetIncludeFromAssetRecursive1'


class AssetArgsFromAssetRecursive1(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'AssetIncludeFromAssetRecursive2'


class AssetArgsFromAssetRecursive2(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'AssetIncludeFromAssetRecursive3'


class AssetArgsFromAssetRecursive3(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'AssetIncludeFromAssetRecursive4'


class AssetArgsFromAssetRecursive4(TypedDict, total=False):
    """Arguments for Asset"""
    
    

class FindManyAssetArgsFromAsset(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive1'


class FindManyAssetArgsFromAssetRecursive1(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive2'


class FindManyAssetArgsFromAssetRecursive2(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive3'


class FindManyAssetArgsFromAssetRecursive3(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive4'


class FindManyAssetArgsFromAssetRecursive4(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    
    

class TransactionIncludeFromAsset(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive1']


class TransactionIncludeFromAssetRecursive1(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive2']


class TransactionIncludeFromAssetRecursive2(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive3']


class TransactionIncludeFromAssetRecursive3(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive4']


class TransactionIncludeFromAssetRecursive4(TypedDict, total=False):
    """Relational arguments for Asset"""

    

class TransactionArgsFromAsset(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromAssetRecursive1(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromAssetRecursive2(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromAssetRecursive3(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromAssetRecursive4(TypedDict, total=False):
    """Arguments for Asset"""
    
    

class FindManyTransactionArgsFromAsset(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromAssetRecursive1(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromAssetRecursive2(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromAssetRecursive3(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromAssetRecursive4(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class HistoricalDataIncludeFromAsset(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive1']


class HistoricalDataIncludeFromAssetRecursive1(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive2']


class HistoricalDataIncludeFromAssetRecursive2(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive3']


class HistoricalDataIncludeFromAssetRecursive3(TypedDict, total=False):
    """Relational arguments for Asset"""
    asset: Union[bool, 'AssetArgsFromAssetRecursive4']


class HistoricalDataIncludeFromAssetRecursive4(TypedDict, total=False):
    """Relational arguments for Asset"""

    

class HistoricalDataArgsFromAsset(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive1'


class HistoricalDataArgsFromAssetRecursive1(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive2'


class HistoricalDataArgsFromAssetRecursive2(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive3'


class HistoricalDataArgsFromAssetRecursive3(TypedDict, total=False):
    """Arguments for Asset"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive4'


class HistoricalDataArgsFromAssetRecursive4(TypedDict, total=False):
    """Arguments for Asset"""
    
    

class FindManyHistoricalDataArgsFromAsset(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive1'


class FindManyHistoricalDataArgsFromAssetRecursive1(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive2'


class FindManyHistoricalDataArgsFromAssetRecursive2(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive3'


class FindManyHistoricalDataArgsFromAssetRecursive3(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive4'


class FindManyHistoricalDataArgsFromAssetRecursive4(TypedDict, total=False):
    """Arguments for Asset"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    


FindManyAssetArgs = FindManyAssetArgsFromAsset
FindFirstAssetArgs = FindManyAssetArgsFromAsset


    

class AssetWhereInput(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    assetType: Union[_str, 'types.StringFilter']
    sector: Union[None, _str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    transactions: 'TransactionListRelationFilter'
    historicalData: 'HistoricalDataListRelationFilter'

    # should be noted that AND and NOT should be Union['AssetWhereInputRecursive1', List['AssetWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AssetWhereInputRecursive1']
    OR: List['AssetWhereInputRecursive1']
    NOT: List['AssetWhereInputRecursive1']


class AssetWhereInputRecursive1(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    assetType: Union[_str, 'types.StringFilter']
    sector: Union[None, _str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    transactions: 'TransactionListRelationFilter'
    historicalData: 'HistoricalDataListRelationFilter'

    # should be noted that AND and NOT should be Union['AssetWhereInputRecursive2', List['AssetWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AssetWhereInputRecursive2']
    OR: List['AssetWhereInputRecursive2']
    NOT: List['AssetWhereInputRecursive2']


class AssetWhereInputRecursive2(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    assetType: Union[_str, 'types.StringFilter']
    sector: Union[None, _str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    transactions: 'TransactionListRelationFilter'
    historicalData: 'HistoricalDataListRelationFilter'

    # should be noted that AND and NOT should be Union['AssetWhereInputRecursive3', List['AssetWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AssetWhereInputRecursive3']
    OR: List['AssetWhereInputRecursive3']
    NOT: List['AssetWhereInputRecursive3']


class AssetWhereInputRecursive3(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    assetType: Union[_str, 'types.StringFilter']
    sector: Union[None, _str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    transactions: 'TransactionListRelationFilter'
    historicalData: 'HistoricalDataListRelationFilter'

    # should be noted that AND and NOT should be Union['AssetWhereInputRecursive4', List['AssetWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AssetWhereInputRecursive4']
    OR: List['AssetWhereInputRecursive4']
    NOT: List['AssetWhereInputRecursive4']


class AssetWhereInputRecursive4(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    assetType: Union[_str, 'types.StringFilter']
    sector: Union[None, _str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    transactions: 'TransactionListRelationFilter'
    historicalData: 'HistoricalDataListRelationFilter'



# aggregate Asset types


    

class AssetScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    assetType: Union[_str, 'types.StringWithAggregatesFilter']
    sector: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['AssetScalarWhereWithAggregatesInputRecursive1']
    OR: List['AssetScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AssetScalarWhereWithAggregatesInputRecursive1']


class AssetScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    assetType: Union[_str, 'types.StringWithAggregatesFilter']
    sector: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['AssetScalarWhereWithAggregatesInputRecursive2']
    OR: List['AssetScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AssetScalarWhereWithAggregatesInputRecursive2']


class AssetScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    assetType: Union[_str, 'types.StringWithAggregatesFilter']
    sector: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['AssetScalarWhereWithAggregatesInputRecursive3']
    OR: List['AssetScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AssetScalarWhereWithAggregatesInputRecursive3']


class AssetScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    assetType: Union[_str, 'types.StringWithAggregatesFilter']
    sector: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['AssetScalarWhereWithAggregatesInputRecursive4']
    OR: List['AssetScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AssetScalarWhereWithAggregatesInputRecursive4']


class AssetScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Asset arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    assetType: Union[_str, 'types.StringWithAggregatesFilter']
    sector: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']



class AssetGroupByOutput(TypedDict, total=False):
    id: _int
    symbol: _str
    name: _str
    assetType: _str
    sector: _str
    quantity: _float
    price: _float
    _sum: 'AssetSumAggregateOutput'
    _avg: 'AssetAvgAggregateOutput'
    _min: 'AssetMinAggregateOutput'
    _max: 'AssetMaxAggregateOutput'
    _count: 'AssetCountAggregateOutput'


class AssetAvgAggregateOutput(TypedDict, total=False):
    """Asset output for aggregating averages"""
    id: float
    quantity: float
    price: float


class AssetSumAggregateOutput(TypedDict, total=False):
    """Asset output for aggregating sums"""
    id: _int
    quantity: _float
    price: _float


class AssetScalarAggregateOutput(TypedDict, total=False):
    """Asset output including scalar fields"""
    id: _int
    symbol: _str
    name: _str
    assetType: _str
    sector: _str
    quantity: _float
    price: _float


AssetMinAggregateOutput = AssetScalarAggregateOutput
AssetMaxAggregateOutput = AssetScalarAggregateOutput


class AssetMaxAggregateInput(TypedDict, total=False):
    """Asset input for aggregating by max"""
    id: bool
    symbol: bool
    name: bool
    assetType: bool
    sector: bool
    quantity: bool
    price: bool


class AssetMinAggregateInput(TypedDict, total=False):
    """Asset input for aggregating by min"""
    id: bool
    symbol: bool
    name: bool
    assetType: bool
    sector: bool
    quantity: bool
    price: bool


class AssetNumberAggregateInput(TypedDict, total=False):
    """Asset input for aggregating numbers"""
    id: bool
    quantity: bool
    price: bool


AssetAvgAggregateInput = AssetNumberAggregateInput
AssetSumAggregateInput = AssetNumberAggregateInput


AssetCountAggregateInput = TypedDict(
    'AssetCountAggregateInput',
    {
        'id': bool,
        'symbol': bool,
        'name': bool,
        'assetType': bool,
        'sector': bool,
        'quantity': bool,
        'price': bool,
        '_all': bool,
    },
    total=False,
)

AssetCountAggregateOutput = TypedDict(
    'AssetCountAggregateOutput',
    {
        'id': int,
        'symbol': int,
        'name': int,
        'assetType': int,
        'sector': int,
        'quantity': int,
        'price': int,
        '_all': int,
    },
    total=False,
)


AssetKeys = Literal[
    'id',
    'symbol',
    'name',
    'assetType',
    'sector',
    'quantity',
    'price',
    'transactions',
    'historicalData',
]
AssetScalarFieldKeys = Literal[
    'id',
    'symbol',
    'name',
    'assetType',
    'sector',
    'quantity',
    'price',
]
AssetScalarFieldKeysT = TypeVar('AssetScalarFieldKeysT', bound=AssetScalarFieldKeys)

AssetRelationalFieldKeys = Literal[
        'transactions',
        'historicalData',
    ]

# Transaction types

class TransactionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Transaction create method"""
    id: _int
    createdAt: datetime.datetime
    asset: 'AssetCreateNestedWithoutRelationsInput'
    assetId: _int


class TransactionCreateInput(TransactionOptionalCreateInput):
    """Required arguments to the Transaction create method"""
    type: _str
    quantity: _float
    price: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TransactionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Transaction create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    assetId: _int


class TransactionCreateWithoutRelationsInput(TransactionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Transaction create method, without relations"""
    type: _str
    quantity: _float
    price: _float

class TransactionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TransactionCreateWithoutRelationsInput'
    where: 'TransactionWhereUniqueInput'

class TransactionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TransactionCreateWithoutRelationsInput'
    connect: 'TransactionWhereUniqueInput'
    connect_or_create: 'TransactionConnectOrCreateWithoutRelationsInput'


class TransactionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TransactionCreateWithoutRelationsInput', List['TransactionCreateWithoutRelationsInput']]
    connect: Union['TransactionWhereUniqueInput', List['TransactionWhereUniqueInput']]
    connect_or_create: Union['TransactionConnectOrCreateWithoutRelationsInput', List['TransactionConnectOrCreateWithoutRelationsInput']]

_TransactionWhereUnique_id_Input = TypedDict(
    '_TransactionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

TransactionWhereUniqueInput = _TransactionWhereUnique_id_Input


class TransactionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    type: _str
    quantity: Union[AtomicFloatInput, _float]
    price: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime
    asset: 'AssetUpdateOneWithoutRelationsInput'


class TransactionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    type: _str
    quantity: Union[AtomicFloatInput, _float]
    price: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime


class TransactionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TransactionCreateWithoutRelationsInput']
    connect: List['TransactionWhereUniqueInput']
    connect_or_create: List['TransactionConnectOrCreateWithoutRelationsInput']
    set: List['TransactionWhereUniqueInput']
    disconnect: List['TransactionWhereUniqueInput']
    delete: List['TransactionWhereUniqueInput']

    # TODO
    # update: List['TransactionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TransactionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TransactionScalarWhereInput']
    # upsert: List['TransactionUpserteWithWhereUniqueWithoutRelationsInput']


class TransactionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TransactionCreateWithoutRelationsInput'
    connect: 'TransactionWhereUniqueInput'
    connect_or_create: 'TransactionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TransactionUpdateInput'
    # upsert: 'TransactionUpsertWithoutRelationsInput'


class TransactionUpsertInput(TypedDict):
    create: 'TransactionCreateInput'
    update: 'TransactionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Transaction_id_OrderByInput = TypedDict(
    '_Transaction_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Transaction_type_OrderByInput = TypedDict(
    '_Transaction_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Transaction_quantity_OrderByInput = TypedDict(
    '_Transaction_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_Transaction_price_OrderByInput = TypedDict(
    '_Transaction_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Transaction_createdAt_OrderByInput = TypedDict(
    '_Transaction_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Transaction_assetId_OrderByInput = TypedDict(
    '_Transaction_assetId_OrderByInput',
    {
        'assetId': 'SortOrder',
    },
    total=True
)

_Transaction_RelevanceInner = TypedDict(
    '_Transaction_RelevanceInner',
    {
        'fields': 'List[TransactionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Transaction_RelevanceOrderByInput = TypedDict(
    '_Transaction_RelevanceOrderByInput',
    {
        '_relevance': '_Transaction_RelevanceInner',
    },
    total=True
)

TransactionOrderByInput = Union[
    '_Transaction_id_OrderByInput',
    '_Transaction_type_OrderByInput',
    '_Transaction_quantity_OrderByInput',
    '_Transaction_price_OrderByInput',
    '_Transaction_createdAt_OrderByInput',
    '_Transaction_assetId_OrderByInput',
    '_Transaction_RelevanceOrderByInput',
]



# recursive Transaction types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TransactionRelationFilter = TypedDict(
    'TransactionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TransactionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TransactionInclude(TypedDict, total=False):
    """Transaction relational arguments"""
    asset: Union[bool, 'AssetArgsFromTransaction']


    

class AssetIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive1']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromTransactionRecursive1']


class AssetIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive2']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromTransactionRecursive2']


class AssetIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive3']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromTransactionRecursive3']


class AssetIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive4']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromTransactionRecursive4']


class AssetIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class AssetArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AssetIncludeFromAssetRecursive1'


class AssetArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AssetIncludeFromAssetRecursive2'


class AssetArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AssetIncludeFromAssetRecursive3'


class AssetArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AssetIncludeFromAssetRecursive4'


class AssetArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyAssetArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive1'


class FindManyAssetArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive2'


class FindManyAssetArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive3'


class FindManyAssetArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive4'


class FindManyAssetArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    
    

class TransactionIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive1']


class TransactionIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive2']


class TransactionIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive3']


class TransactionIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive4']


class TransactionIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class TransactionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyTransactionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class HistoricalDataIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive1']


class HistoricalDataIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive2']


class HistoricalDataIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive3']


class HistoricalDataIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    asset: Union[bool, 'AssetArgsFromTransactionRecursive4']


class HistoricalDataIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class HistoricalDataArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive1'


class HistoricalDataArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive2'


class HistoricalDataArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive3'


class HistoricalDataArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive4'


class HistoricalDataArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyHistoricalDataArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive1'


class FindManyHistoricalDataArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive2'


class FindManyHistoricalDataArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive3'


class FindManyHistoricalDataArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive4'


class FindManyHistoricalDataArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    


FindManyTransactionArgs = FindManyTransactionArgsFromTransaction
FindFirstTransactionArgs = FindManyTransactionArgsFromTransaction


    

class TransactionWhereInput(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive1', List['TransactionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive1']
    OR: List['TransactionWhereInputRecursive1']
    NOT: List['TransactionWhereInputRecursive1']


class TransactionWhereInputRecursive1(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive2', List['TransactionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive2']
    OR: List['TransactionWhereInputRecursive2']
    NOT: List['TransactionWhereInputRecursive2']


class TransactionWhereInputRecursive2(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive3', List['TransactionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive3']
    OR: List['TransactionWhereInputRecursive3']
    NOT: List['TransactionWhereInputRecursive3']


class TransactionWhereInputRecursive3(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive4', List['TransactionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive4']
    OR: List['TransactionWhereInputRecursive4']
    NOT: List['TransactionWhereInputRecursive4']


class TransactionWhereInputRecursive4(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    quantity: Union[_float, 'types.FloatFilter']
    price: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']



# aggregate Transaction types


    

class TransactionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive1']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive1']


class TransactionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive2']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive2']


class TransactionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive3']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive3']


class TransactionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive4']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive4']


class TransactionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_float, 'types.FloatWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']



class TransactionGroupByOutput(TypedDict, total=False):
    id: _int
    type: _str
    quantity: _float
    price: _float
    createdAt: datetime.datetime
    assetId: _int
    _sum: 'TransactionSumAggregateOutput'
    _avg: 'TransactionAvgAggregateOutput'
    _min: 'TransactionMinAggregateOutput'
    _max: 'TransactionMaxAggregateOutput'
    _count: 'TransactionCountAggregateOutput'


class TransactionAvgAggregateOutput(TypedDict, total=False):
    """Transaction output for aggregating averages"""
    id: float
    quantity: float
    price: float
    assetId: float


class TransactionSumAggregateOutput(TypedDict, total=False):
    """Transaction output for aggregating sums"""
    id: _int
    quantity: _float
    price: _float
    assetId: _int


class TransactionScalarAggregateOutput(TypedDict, total=False):
    """Transaction output including scalar fields"""
    id: _int
    type: _str
    quantity: _float
    price: _float
    createdAt: datetime.datetime
    assetId: _int


TransactionMinAggregateOutput = TransactionScalarAggregateOutput
TransactionMaxAggregateOutput = TransactionScalarAggregateOutput


class TransactionMaxAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating by max"""
    id: bool
    type: bool
    quantity: bool
    price: bool
    createdAt: bool
    assetId: bool


class TransactionMinAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating by min"""
    id: bool
    type: bool
    quantity: bool
    price: bool
    createdAt: bool
    assetId: bool


class TransactionNumberAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating numbers"""
    id: bool
    quantity: bool
    price: bool
    assetId: bool


TransactionAvgAggregateInput = TransactionNumberAggregateInput
TransactionSumAggregateInput = TransactionNumberAggregateInput


TransactionCountAggregateInput = TypedDict(
    'TransactionCountAggregateInput',
    {
        'id': bool,
        'type': bool,
        'quantity': bool,
        'price': bool,
        'createdAt': bool,
        'assetId': bool,
        '_all': bool,
    },
    total=False,
)

TransactionCountAggregateOutput = TypedDict(
    'TransactionCountAggregateOutput',
    {
        'id': int,
        'type': int,
        'quantity': int,
        'price': int,
        'createdAt': int,
        'assetId': int,
        '_all': int,
    },
    total=False,
)


TransactionKeys = Literal[
    'id',
    'type',
    'quantity',
    'price',
    'createdAt',
    'asset',
    'assetId',
]
TransactionScalarFieldKeys = Literal[
    'id',
    'type',
    'quantity',
    'price',
    'createdAt',
    'assetId',
]
TransactionScalarFieldKeysT = TypeVar('TransactionScalarFieldKeysT', bound=TransactionScalarFieldKeys)

TransactionRelationalFieldKeys = Literal[
        'asset',
    ]

# HistoricalData types

class HistoricalDataOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the HistoricalData create method"""
    id: _int
    asset: 'AssetCreateNestedWithoutRelationsInput'
    assetId: _int


class HistoricalDataCreateInput(HistoricalDataOptionalCreateInput):
    """Required arguments to the HistoricalData create method"""
    date: datetime.datetime
    closePrice: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class HistoricalDataOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the HistoricalData create method, without relations"""
    id: _int
    assetId: _int


class HistoricalDataCreateWithoutRelationsInput(HistoricalDataOptionalCreateWithoutRelationsInput):
    """Required arguments to the HistoricalData create method, without relations"""
    date: datetime.datetime
    closePrice: _float

class HistoricalDataConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'HistoricalDataCreateWithoutRelationsInput'
    where: 'HistoricalDataWhereUniqueInput'

class HistoricalDataCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'HistoricalDataCreateWithoutRelationsInput'
    connect: 'HistoricalDataWhereUniqueInput'
    connect_or_create: 'HistoricalDataConnectOrCreateWithoutRelationsInput'


class HistoricalDataCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['HistoricalDataCreateWithoutRelationsInput', List['HistoricalDataCreateWithoutRelationsInput']]
    connect: Union['HistoricalDataWhereUniqueInput', List['HistoricalDataWhereUniqueInput']]
    connect_or_create: Union['HistoricalDataConnectOrCreateWithoutRelationsInput', List['HistoricalDataConnectOrCreateWithoutRelationsInput']]

_HistoricalDataWhereUnique_id_Input = TypedDict(
    '_HistoricalDataWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

HistoricalDataWhereUniqueInput = _HistoricalDataWhereUnique_id_Input


class HistoricalDataUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    date: datetime.datetime
    closePrice: Union[AtomicFloatInput, _float]
    asset: 'AssetUpdateOneWithoutRelationsInput'


class HistoricalDataUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    date: datetime.datetime
    closePrice: Union[AtomicFloatInput, _float]


class HistoricalDataUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['HistoricalDataCreateWithoutRelationsInput']
    connect: List['HistoricalDataWhereUniqueInput']
    connect_or_create: List['HistoricalDataConnectOrCreateWithoutRelationsInput']
    set: List['HistoricalDataWhereUniqueInput']
    disconnect: List['HistoricalDataWhereUniqueInput']
    delete: List['HistoricalDataWhereUniqueInput']

    # TODO
    # update: List['HistoricalDataUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['HistoricalDataUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['HistoricalDataScalarWhereInput']
    # upsert: List['HistoricalDataUpserteWithWhereUniqueWithoutRelationsInput']


class HistoricalDataUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'HistoricalDataCreateWithoutRelationsInput'
    connect: 'HistoricalDataWhereUniqueInput'
    connect_or_create: 'HistoricalDataConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'HistoricalDataUpdateInput'
    # upsert: 'HistoricalDataUpsertWithoutRelationsInput'


class HistoricalDataUpsertInput(TypedDict):
    create: 'HistoricalDataCreateInput'
    update: 'HistoricalDataUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_HistoricalData_id_OrderByInput = TypedDict(
    '_HistoricalData_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_HistoricalData_date_OrderByInput = TypedDict(
    '_HistoricalData_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_HistoricalData_closePrice_OrderByInput = TypedDict(
    '_HistoricalData_closePrice_OrderByInput',
    {
        'closePrice': 'SortOrder',
    },
    total=True
)

_HistoricalData_assetId_OrderByInput = TypedDict(
    '_HistoricalData_assetId_OrderByInput',
    {
        'assetId': 'SortOrder',
    },
    total=True
)

_HistoricalData_RelevanceInner = TypedDict(
    '_HistoricalData_RelevanceInner',
    {
        'fields': 'List[HistoricalDataScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_HistoricalData_RelevanceOrderByInput = TypedDict(
    '_HistoricalData_RelevanceOrderByInput',
    {
        '_relevance': '_HistoricalData_RelevanceInner',
    },
    total=True
)

HistoricalDataOrderByInput = Union[
    '_HistoricalData_id_OrderByInput',
    '_HistoricalData_date_OrderByInput',
    '_HistoricalData_closePrice_OrderByInput',
    '_HistoricalData_assetId_OrderByInput',
    '_HistoricalData_RelevanceOrderByInput',
]



# recursive HistoricalData types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

HistoricalDataRelationFilter = TypedDict(
    'HistoricalDataRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class HistoricalDataListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class HistoricalDataInclude(TypedDict, total=False):
    """HistoricalData relational arguments"""
    asset: Union[bool, 'AssetArgsFromHistoricalData']


    

class AssetIncludeFromHistoricalData(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    transactions: Union[bool, 'FindManyTransactionArgsFromHistoricalDataRecursive1']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromHistoricalDataRecursive1']


class AssetIncludeFromHistoricalDataRecursive1(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    transactions: Union[bool, 'FindManyTransactionArgsFromHistoricalDataRecursive2']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromHistoricalDataRecursive2']


class AssetIncludeFromHistoricalDataRecursive2(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    transactions: Union[bool, 'FindManyTransactionArgsFromHistoricalDataRecursive3']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromHistoricalDataRecursive3']


class AssetIncludeFromHistoricalDataRecursive3(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    transactions: Union[bool, 'FindManyTransactionArgsFromHistoricalDataRecursive4']
    historicalData: Union[bool, 'FindManyHistoricalDataArgsFromHistoricalDataRecursive4']


class AssetIncludeFromHistoricalDataRecursive4(TypedDict, total=False):
    """Relational arguments for HistoricalData"""

    

class AssetArgsFromHistoricalData(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'AssetIncludeFromAssetRecursive1'


class AssetArgsFromHistoricalDataRecursive1(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'AssetIncludeFromAssetRecursive2'


class AssetArgsFromHistoricalDataRecursive2(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'AssetIncludeFromAssetRecursive3'


class AssetArgsFromHistoricalDataRecursive3(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'AssetIncludeFromAssetRecursive4'


class AssetArgsFromHistoricalDataRecursive4(TypedDict, total=False):
    """Arguments for HistoricalData"""
    
    

class FindManyAssetArgsFromHistoricalData(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive1'


class FindManyAssetArgsFromHistoricalDataRecursive1(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive2'


class FindManyAssetArgsFromHistoricalDataRecursive2(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive3'


class FindManyAssetArgsFromHistoricalDataRecursive3(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    include: 'AssetIncludeFromAssetRecursive4'


class FindManyAssetArgsFromHistoricalDataRecursive4(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['AssetOrderByInput', List['AssetOrderByInput']]
    where: 'AssetWhereInput'
    cursor: 'AssetWhereUniqueInput'
    distinct: List['AssetScalarFieldKeys']
    
    

class TransactionIncludeFromHistoricalData(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive1']


class TransactionIncludeFromHistoricalDataRecursive1(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive2']


class TransactionIncludeFromHistoricalDataRecursive2(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive3']


class TransactionIncludeFromHistoricalDataRecursive3(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive4']


class TransactionIncludeFromHistoricalDataRecursive4(TypedDict, total=False):
    """Relational arguments for HistoricalData"""

    

class TransactionArgsFromHistoricalData(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromHistoricalDataRecursive1(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromHistoricalDataRecursive2(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromHistoricalDataRecursive3(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromHistoricalDataRecursive4(TypedDict, total=False):
    """Arguments for HistoricalData"""
    
    

class FindManyTransactionArgsFromHistoricalData(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromHistoricalDataRecursive1(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromHistoricalDataRecursive2(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromHistoricalDataRecursive3(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromHistoricalDataRecursive4(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class HistoricalDataIncludeFromHistoricalData(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive1']


class HistoricalDataIncludeFromHistoricalDataRecursive1(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive2']


class HistoricalDataIncludeFromHistoricalDataRecursive2(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive3']


class HistoricalDataIncludeFromHistoricalDataRecursive3(TypedDict, total=False):
    """Relational arguments for HistoricalData"""
    asset: Union[bool, 'AssetArgsFromHistoricalDataRecursive4']


class HistoricalDataIncludeFromHistoricalDataRecursive4(TypedDict, total=False):
    """Relational arguments for HistoricalData"""

    

class HistoricalDataArgsFromHistoricalData(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive1'


class HistoricalDataArgsFromHistoricalDataRecursive1(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive2'


class HistoricalDataArgsFromHistoricalDataRecursive2(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive3'


class HistoricalDataArgsFromHistoricalDataRecursive3(TypedDict, total=False):
    """Arguments for HistoricalData"""
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive4'


class HistoricalDataArgsFromHistoricalDataRecursive4(TypedDict, total=False):
    """Arguments for HistoricalData"""
    
    

class FindManyHistoricalDataArgsFromHistoricalData(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive1'


class FindManyHistoricalDataArgsFromHistoricalDataRecursive1(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive2'


class FindManyHistoricalDataArgsFromHistoricalDataRecursive2(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive3'


class FindManyHistoricalDataArgsFromHistoricalDataRecursive3(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    include: 'HistoricalDataIncludeFromHistoricalDataRecursive4'


class FindManyHistoricalDataArgsFromHistoricalDataRecursive4(TypedDict, total=False):
    """Arguments for HistoricalData"""
    take: int
    skip: int
    order_by: Union['HistoricalDataOrderByInput', List['HistoricalDataOrderByInput']]
    where: 'HistoricalDataWhereInput'
    cursor: 'HistoricalDataWhereUniqueInput'
    distinct: List['HistoricalDataScalarFieldKeys']
    


FindManyHistoricalDataArgs = FindManyHistoricalDataArgsFromHistoricalData
FindFirstHistoricalDataArgs = FindManyHistoricalDataArgsFromHistoricalData


    

class HistoricalDataWhereInput(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    closePrice: Union[_float, 'types.FloatFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['HistoricalDataWhereInputRecursive1', List['HistoricalDataWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['HistoricalDataWhereInputRecursive1']
    OR: List['HistoricalDataWhereInputRecursive1']
    NOT: List['HistoricalDataWhereInputRecursive1']


class HistoricalDataWhereInputRecursive1(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    closePrice: Union[_float, 'types.FloatFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['HistoricalDataWhereInputRecursive2', List['HistoricalDataWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['HistoricalDataWhereInputRecursive2']
    OR: List['HistoricalDataWhereInputRecursive2']
    NOT: List['HistoricalDataWhereInputRecursive2']


class HistoricalDataWhereInputRecursive2(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    closePrice: Union[_float, 'types.FloatFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['HistoricalDataWhereInputRecursive3', List['HistoricalDataWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['HistoricalDataWhereInputRecursive3']
    OR: List['HistoricalDataWhereInputRecursive3']
    NOT: List['HistoricalDataWhereInputRecursive3']


class HistoricalDataWhereInputRecursive3(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    closePrice: Union[_float, 'types.FloatFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['HistoricalDataWhereInputRecursive4', List['HistoricalDataWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['HistoricalDataWhereInputRecursive4']
    OR: List['HistoricalDataWhereInputRecursive4']
    NOT: List['HistoricalDataWhereInputRecursive4']


class HistoricalDataWhereInputRecursive4(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    closePrice: Union[_float, 'types.FloatFilter']
    asset: 'AssetRelationFilter'
    assetId: Union[_int, 'types.IntFilter']



# aggregate HistoricalData types


    

class HistoricalDataScalarWhereWithAggregatesInput(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closePrice: Union[_float, 'types.FloatWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['HistoricalDataScalarWhereWithAggregatesInputRecursive1']
    OR: List['HistoricalDataScalarWhereWithAggregatesInputRecursive1']
    NOT: List['HistoricalDataScalarWhereWithAggregatesInputRecursive1']


class HistoricalDataScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closePrice: Union[_float, 'types.FloatWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['HistoricalDataScalarWhereWithAggregatesInputRecursive2']
    OR: List['HistoricalDataScalarWhereWithAggregatesInputRecursive2']
    NOT: List['HistoricalDataScalarWhereWithAggregatesInputRecursive2']


class HistoricalDataScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closePrice: Union[_float, 'types.FloatWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['HistoricalDataScalarWhereWithAggregatesInputRecursive3']
    OR: List['HistoricalDataScalarWhereWithAggregatesInputRecursive3']
    NOT: List['HistoricalDataScalarWhereWithAggregatesInputRecursive3']


class HistoricalDataScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closePrice: Union[_float, 'types.FloatWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['HistoricalDataScalarWhereWithAggregatesInputRecursive4']
    OR: List['HistoricalDataScalarWhereWithAggregatesInputRecursive4']
    NOT: List['HistoricalDataScalarWhereWithAggregatesInputRecursive4']


class HistoricalDataScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """HistoricalData arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closePrice: Union[_float, 'types.FloatWithAggregatesFilter']
    assetId: Union[_int, 'types.IntWithAggregatesFilter']



class HistoricalDataGroupByOutput(TypedDict, total=False):
    id: _int
    date: datetime.datetime
    closePrice: _float
    assetId: _int
    _sum: 'HistoricalDataSumAggregateOutput'
    _avg: 'HistoricalDataAvgAggregateOutput'
    _min: 'HistoricalDataMinAggregateOutput'
    _max: 'HistoricalDataMaxAggregateOutput'
    _count: 'HistoricalDataCountAggregateOutput'


class HistoricalDataAvgAggregateOutput(TypedDict, total=False):
    """HistoricalData output for aggregating averages"""
    id: float
    closePrice: float
    assetId: float


class HistoricalDataSumAggregateOutput(TypedDict, total=False):
    """HistoricalData output for aggregating sums"""
    id: _int
    closePrice: _float
    assetId: _int


class HistoricalDataScalarAggregateOutput(TypedDict, total=False):
    """HistoricalData output including scalar fields"""
    id: _int
    date: datetime.datetime
    closePrice: _float
    assetId: _int


HistoricalDataMinAggregateOutput = HistoricalDataScalarAggregateOutput
HistoricalDataMaxAggregateOutput = HistoricalDataScalarAggregateOutput


class HistoricalDataMaxAggregateInput(TypedDict, total=False):
    """HistoricalData input for aggregating by max"""
    id: bool
    date: bool
    closePrice: bool
    assetId: bool


class HistoricalDataMinAggregateInput(TypedDict, total=False):
    """HistoricalData input for aggregating by min"""
    id: bool
    date: bool
    closePrice: bool
    assetId: bool


class HistoricalDataNumberAggregateInput(TypedDict, total=False):
    """HistoricalData input for aggregating numbers"""
    id: bool
    closePrice: bool
    assetId: bool


HistoricalDataAvgAggregateInput = HistoricalDataNumberAggregateInput
HistoricalDataSumAggregateInput = HistoricalDataNumberAggregateInput


HistoricalDataCountAggregateInput = TypedDict(
    'HistoricalDataCountAggregateInput',
    {
        'id': bool,
        'date': bool,
        'closePrice': bool,
        'assetId': bool,
        '_all': bool,
    },
    total=False,
)

HistoricalDataCountAggregateOutput = TypedDict(
    'HistoricalDataCountAggregateOutput',
    {
        'id': int,
        'date': int,
        'closePrice': int,
        'assetId': int,
        '_all': int,
    },
    total=False,
)


HistoricalDataKeys = Literal[
    'id',
    'date',
    'closePrice',
    'asset',
    'assetId',
]
HistoricalDataScalarFieldKeys = Literal[
    'id',
    'date',
    'closePrice',
    'assetId',
]
HistoricalDataScalarFieldKeysT = TypeVar('HistoricalDataScalarFieldKeysT', bound=HistoricalDataScalarFieldKeys)

HistoricalDataRelationalFieldKeys = Literal[
        'asset',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields